// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int              @id @default(autoincrement())
  first_name      String?
  last_name       String?
  email           String           @unique
  password        String
  role            Role             @default(user)
  contact_no      String?
  profile_img     String?
  refresh_token   String?
  rating          Int[]
  is_featured     Boolean          @default(false)
  about_user      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  plans           Plans[]
  booking_history BookingHistory[]
  payout_history  PayoutHistory[]
  reviews         Reviews[]
  planReviews     PlanReviews[]

  @@map("user")
}

enum Role {
  admin
  user
  super_admin
  agency
}

model Plans {
  id                Int              @id @default(autoincrement())
  users             Users            @relation(fields: [agency_id], references: [id])
  agency_id         Int
  plan_name         String
  images            String[]
  starting_location String
  price             Decimal          @db.Decimal(10, 2)
  cover_location    String[]
  tour_duration     Int
  starting_time     DateTime
  destination       String           @default("unknown")
  total_meals       Int
  description       String
  is_featured       Boolean          @default(false)
  booking_deadline  DateTime
  events            String[]
  Payout_history    PayoutHistory[]
  booking_history   BookingHistory[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  planReviews       PlanReviews[]
}

model BookingHistory {
  id           Int           @id @default(autoincrement())
  status       BookingStatus @default(pending)
  user         Users         @relation(fields: [user_id], references: [id])
  plan         Plans         @relation(fields: [plan_id], references: [id])
  plan_id      Int
  quantity     Int
  user_id      Int
  total_amount Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  planReviews  PlanReviews[]
}

enum BookingStatus {
  pending
  booked
  canceled
  rejected
  completed
}

model PayoutHistory {
  id        Int          @id @default(autoincrement())
  plan      Plans        @relation(fields: [plan_id], references: [id])
  user      Users        @relation(fields: [agency_id], references: [id])
  plan_id   Int
  agency_id Int
  status    PayoutStatus @default(pending)
  amount    Decimal
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum PayoutStatus {
  pending
  paid
  cenceled
}

model Reviews {
  id                 Int      @id @default(autoincrement())
  user               Users    @relation(fields: [user_id], references: [id])
  user_id            Int
  rating             Int
  review_description String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PlanReviews {
  id         Int            @id @default(autoincrement())
  user_id    Int
  plan_id    Int
  booking_id Int
  rating     Int
  feedback   String
  user       Users          @relation(fields: [user_id], references: [id])
  plans      Plans          @relation(fields: [plan_id], references: [id])
  booking    BookingHistory @relation(fields: [booking_id], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}
